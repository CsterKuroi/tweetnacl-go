package tweetnacl

import (
	"bytes"
	"testing"
)

// --- CryptoCoreHSalsa20 ---

func TestCryptoCoreHSalsa20(t *testing.T) {

	in := []byte{0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00}

	key := []byte{0x4a, 0x5d, 0x9d, 0x5b,
		0xa4, 0xce, 0x2d, 0xe1,
		0x72, 0x8e, 0x3b, 0xf4,
		0x80, 0x35, 0x0f, 0x25,
		0xe0, 0x7e, 0x21, 0xc9,
		0x47, 0xd1, 0x9e, 0x33,
		0x76, 0xf0, 0x9b, 0x3c,
		0x1e, 0x16, 0x17, 0x42}

	constant := []byte{0x65, 0x78, 0x70, 0x61,
		0x6e, 0x64, 0x20, 0x33,
		0x32, 0x2d, 0x62, 0x79,
		0x74, 0x65, 0x20, 0x6b}

	expected := []byte{0x1b, 0x27, 0x55, 0x64,
		0x73, 0xe9, 0x85, 0xd4,
		0x62, 0xcd, 0x51, 0x19,
		0x7a, 0x9a, 0x46, 0xc7,
		0x60, 0x09, 0x54, 0x9e,
		0xac, 0x64, 0x74, 0xf2,
		0x06, 0xc4, 0xee, 0x08,
		0x44, 0xf6, 0x83, 0x89}

	out, err := CryptoCoreHSalsa20(in, key, constant)

	if err != nil {
		t.Errorf("cryptocore_hsalsa20: %v", err)
		return
	}

	if out == nil {
		t.Errorf("cryptocore_hsalsa20: nil")
		return
	}

	if !bytes.Equal(out, expected) {
		t.Errorf("cryptocore_hsalsa20: invalid intermediate key (%v)", out)
		return
	}
}

func BenchmarkCryptoHSalsa20(b *testing.B) {

	in := []byte{0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00}

	key := []byte{0x4a, 0x5d, 0x9d, 0x5b,
		0xa4, 0xce, 0x2d, 0xe1,
		0x72, 0x8e, 0x3b, 0xf4,
		0x80, 0x35, 0x0f, 0x25,
		0xe0, 0x7e, 0x21, 0xc9,
		0x47, 0xd1, 0x9e, 0x33,
		0x76, 0xf0, 0x9b, 0x3c,
		0x1e, 0x16, 0x17, 0x42}

	constant := []byte{0x65, 0x78, 0x70, 0x61,
		0x6e, 0x64, 0x20, 0x33,
		0x32, 0x2d, 0x62, 0x79,
		0x74, 0x65, 0x20, 0x6b}

	for i := 0; i < b.N; i++ {
		CryptoCoreHSalsa20(in, key, constant)
	}
}

package tweetnacl

import (
	"bytes"
	"testing"
)

// --- CryptoStream ---

// Adapted from tests/secretbox2.c
func TestCryptoStream(t *testing.T) {
	nonce := []byte{
		0x69, 0x69, 0x6e, 0xe9,
		0x55, 0xb6, 0x2b, 0x73,
		0xcd, 0x62, 0xbd, 0xa8,
		0x75, 0xfc, 0x73, 0xd6,
		0x82, 0x19, 0xe0, 0x03,
		0x6b, 0x7a, 0x0b, 0x37}

	key := []byte{
		0x1b, 0x27, 0x55, 0x64,
		0x73, 0xe9, 0x85, 0xd4,
		0x62, 0xcd, 0x51, 0x19,
		0x7a, 0x9a, 0x46, 0xc7,
		0x60, 0x09, 0x54, 0x9e,
		0xac, 0x64, 0x74, 0xf2,
		0x06, 0xc4, 0xee, 0x08,
		0x44, 0xf6, 0x83, 0x89}

	expected := []byte{
		0xee, 0xa6, 0xa7, 0x25,
		0x1c, 0x1e, 0x72, 0x91,
		0x6d, 0x11, 0xc2, 0xcb,
		0x21, 0x4d, 0x3c, 0x25,
		0x25, 0x39, 0x12, 0x1d,
		0x8e, 0x23, 0x4e, 0x65,
		0x2d, 0x65, 0x1f, 0xa4,
		0xc8, 0xcf, 0xf8, 0x80}

	stream, err := CryptoStream(32, nonce, key)

	if err != nil {
		t.Errorf("crypto_stream: %v", err)
		return
	}

	if !bytes.Equal(stream, expected) {
		t.Errorf("crypto_stream: invalid cipher stream (%v)", stream)
		return
	}
}
func BenchmarkCryptoStream(b *testing.B) {
	nonce := []byte{
		0x69, 0x69, 0x6e, 0xe9,
		0x55, 0xb6, 0x2b, 0x73,
		0xcd, 0x62, 0xbd, 0xa8,
		0x75, 0xfc, 0x73, 0xd6,
		0x82, 0x19, 0xe0, 0x03,
		0x6b, 0x7a, 0x0b, 0x37}

	key := []byte{
		0x1b, 0x27, 0x55, 0x64,
		0x73, 0xe9, 0x85, 0xd4,
		0x62, 0xcd, 0x51, 0x19,
		0x7a, 0x9a, 0x46, 0xc7,
		0x60, 0x09, 0x54, 0x9e,
		0xac, 0x64, 0x74, 0xf2,
		0x06, 0xc4, 0xee, 0x08,
		0x44, 0xf6, 0x83, 0x89}

	for i := 0; i < b.N; i++ {
		CryptoStream(32, nonce, key)
	}
}
